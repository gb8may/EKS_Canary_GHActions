name: Application Pipeline

on:
  push:
    branches:
      - main

jobs:
  Push-to-ecr:
    runs-on: [self-hosted]
    timeout-minutes: 10

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: ECR Login
        run: |
          aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 868669587970.dkr.ecr.us-east-1.amazonaws.com

      - name: Build and Push Docker Image
        run: |
          sudo docker build -t python-application ./Application/
          sudo docker tag python-application:latest 868669587970.dkr.ecr.us-east-1.amazonaws.com/python-application:latest
          sudo docker push 868669587970.dkr.ecr.us-east-1.amazonaws.com/python-application:latest

  Image-Scanner:
    needs: Push-to-ecr
    runs-on: [self-hosted]
    timeout-minutes: 10

    steps:
      - name: Scan ECR Images with Trivy
        run: |
          aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 868669587970.dkr.ecr.us-east-1.amazonaws.com
          images=($(aws ecr describe-repositories --region us-east-1 --repository-names python-application | jq -r '.repositories[].repositoryUri'))
          for image in "${images[@]}"; do
            if sudo trivy image -q --severity HIGH,CRITICAL --exit-code 1 "$image:latest"; then
              echo "Trivy scan passed, no critical vulnerabilities found."
            else
              echo "Trivy scan failed, but ignoring it to continue the workflow."
              echo "::error::Vulnerabilities found by Trivy"
            fi
          done

  Canary-deploy:
    needs: Image-Scanner
    runs-on: [self-hosted]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Assume IAM Role
        run: |
          ROLE_ARN=${{ secrets.EKS_IAM_ROLE_ARN }}
          TEMP_CREDENTIALS=$(aws sts assume-role --role-arn $ROLE_ARN --role-session-name GitHubActions)
          export AWS_ACCESS_KEY_ID=$(echo $TEMP_CREDENTIALS | jq -r .Credentials.AccessKeyId)
          export AWS_SECRET_ACCESS_KEY=$(echo $TEMP_CREDENTIALS | jq -r .Credentials.SecretAccessKey)
          export AWS_SESSION_TOKEN=$(echo $TEMP_CREDENTIALS | jq -r .Credentials.SessionToken)
        env:
          AWS_DEFAULT_REGION: us-east-1

      - name: Set Up kubectl
        run: |
          aws eks --region us-east-1 update-kubeconfig --name canary-elk-cluster

      - name: Deploy to Canary
        run: |
          kubectl apply -f ./Application/deployment.yaml

      - name: Run Canary Analysis
        run: |
          # Run your canary analysis scripts or tools

      - name: Promote Canary to Stable
        if: success()
        run: |
          kubectl apply -f ./Application/deployment.yaml